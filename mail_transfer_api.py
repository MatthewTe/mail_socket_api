# Importing data management packages:
import pandas as pd

# Importing SMTP packages:
import smtplib


# Connection Object for mail msg sending mail :
class smtp_socket(smtplib.SMTP):
    """
    This is a commuincation object that makes use of the SMTP python package to
    send pipeline relevant information to a SMTP server account.

    This method is meant to operate similarly to the api that allows data to be
    sent through a network socket. It is essetally an object that wraps the
    smtp.SMTP object and allows relevant pipeline data to be uploaded. It is then
    under the assumption that this data is read from the SMTP server via the twin
    object imap_socket().

    See documentation as to why this bootstrap method of making use of email severs
    was used to transfer data as opposed to traditional network sockets.

    Parameters
    ----------
    smtp_server : str
        A string that represents the domain name of the SMTP server. This will
        be used to initalize the smtplib.SMTP object. eg: 'stmp.gmail.com'.

    port : int
        An integer representing the port number used to connect to the SMTP server.

    mail_address : str
        This is the string representing the email address that the method will
        connect to and upload messages to.

    psswrd : str
        The password that will be used to sign into the SMTP server.

    debug : bool
        A boolean dictating whether the debug messages for the object print. By
        default it is set to True.
    """
    def __init__(self, smtp_server, port, mail_address, psswrd, debug=True):

        # Declaring instance variables:
        self.debug = debug
        self.mail_address = mail_address

        # Initalizing the SMTP parent object to connect to mail server:
        super().__init__(smtp_server, port)

        # Performing handshake with the SMTP server and confirming sucess:
        if self.ehlo()[0] == 250:

            self.debug_print(f'[HANDSHAKE WITH {smtp_server} SUCESSFULL]')


        else:
            print(f'[HANDSHAKE WITH {smtp_server} UNSUCESSFULL. ABORTING]')
            return

        # If connecting to sever on port 587, activating TLS encryption:
        if port == 587:

            # Confirming TLS encryption ennabled:
            if 220 == self.starttls()[0]:
                self.debug_print('\n[TLS Encryption ACTIVE]')

        # Logging in to SMTP server:
        if self.login(mail_address, psswrd)[0] == 235:

            self.debug_print(f'[LOGIN TO ACCOUNT {mail_address} SUCESSFULL]')

# <------------------------Pipeline Specific Sending Methods------------------->

    # Method designed to send csv data generated from the seven day dfs0_pipeline:
    def send_forecast_data(self, data):
        '''
        Method that sends an email with a csv attachment to the SMTP server. It
        is designed to send a message with the correct formatting to be read by
        the IMAP socket as data generated from the seven day forecast model.

        It is assumed that the data parameter is a .csv file of concatinated
        seven day forecast data generated by the HD model. If it is not many of
        the tagging and formatting processes may not function. See Documentation.

        Parameters
        ----------
        data : str
            A string representing the path to the .csv file that is to be attached
            to the message.

        client_name : str
            This is the string that represents the name of the client for which
            the forecast data was generated for. It must be the same as the client
            names used in the data pipeline api. 
        '''
        #


# <-------------------------------"Helper" Functions-------------------------->

    # Method that facilitates debug printing:
    def debug_print(self, message):
        '''
        Debug mehod that allows printing of debug messages if debug=True in
        initalization.

        Parameter
        ---------
        message: str
            The string to be printed if debug=True.
        '''
        if self.debug == True:
            print(message)

smtp_socket('smtp.gmail.com', 587, 'baxlerod@gmail.com', 'Entropy_Investments')
